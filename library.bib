Automatically generated by Mendeley Desktop 1.17.10
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Preferences -> BibTeX in Mendeley Desktop

@article{Lal,
abstract = {The application of software-verification technology towards building realistic bug-finding tools requires working through several precision-scalability tradeoffs. For instance, a critical aspect while dealing with C programs is to formally define the treatment of pointers and the heap. A machine-level modeling is often intractable, whereas one that leverages high-level information (such as types) can be inaccurate. Another tradeoff is modeling integer arithmetic. Ideally, all arithmetic should be performed over bitvector representations whereas the current practice in most tools is to use mathematical integers for scalability. A third tradeoff, in the context of bounded program exploration, is to choose a bound that ensures high coverage without overwhelming the analysis. This paper works through these three tradeoffs when we applied Corral, an SMT-based verifier, inside Microsoft's Static Driver Verifier (SDV). Our decisions were guided by experimentation on a large set of drivers; the total verification time exceeded well over a month. We justify that each of our decisions were crucial in getting value out of Corral and led to Corral being accepted as the engine that powers SDV in the Windows 8.1 release, replacing the SLAM engine that had been used inside SDV for the past decade.},
author = {Lal, Akash and Qadeer, Shaz},
doi = {10.1145/2635868.2635894},
file = {:Users/BoYaunHuang/Library/Application Support/Mendeley Desktop/Downloaded/Lal, Qadeer - Unknown - Powering the Static Driver Verifier using Corral.pdf:pdf},
keywords = {Bitvector Rea-soning,D25 [Software Engineering],Device Drivers,Language Semantics,Loop Coverage,SMT,Software/Program Verifi-cation,Testing,Testing and Debug-ging General Terms Reliability,Verification Keywords Software Verification},
title = {{Powering the Static Driver Verifier using Corral}},
url = {https://www.microsoft.com/en-us/research/wp-content/uploads/2016/02/SdvCorralFSE.pdf}
}
@article{Lal2014,
abstract = {The application of software-verification technology towards building realistic bug-finding tools requires working through several precision-scalability tradeoffs. For instance, a critical aspect while dealing with C programs is to formally define the treatment of pointers and the heap. A machine-level modeling is often intractable, whereas one that leverages high-level information (such as types) can be inaccurate. Another tradeoff is modeling integer arithmetic. Ideally, all arithmetic should be performed over bitvector representations whereas the current practice in most tools is to use mathematical integers for scalability. A third tradeoff, in the context of bounded program exploration, is to choose a bound that ensures high coverage without overwhelming the analysis. This paper works through these three tradeoffs when we applied Corral, an SMT-based verifier, inside Microsoft{\&}{\#}039;s Static Driver Verifier (SDV). Our decisions were guided by experimentation on a large set of drivers; the total verification time exceeded well over a month. We justify that each of our decisions were crucial in getting value out of Corral and led to Corral being accepted as the engine that powers SDV in the Windows 8.1 release, replacing the SLAM engine that had been used inside SDV for the past decade. },
author = {Lal, Akash and Qadeer, Shaz},
doi = {10.1145/2635868.2635894},
file = {:Users/BoYaunHuang/Google Drive/Research/Papers/SummerReadingList/Powering the Static Driver Verifier using Corral.pdf:pdf},
isbn = {978-1-4503-3056-5},
journal = {Proceedings of the 22Nd ACM SIGSOFT International Symposium on Foundations of Software Engineering},
keywords = {Bitvector Reasoning,Device Drivers,Language Semantics,Loop Coverage,SMT,Software Verification},
pages = {202--212},
title = {{Powering the Static Driver Verifier Using Corral}},
url = {http://doi.acm.org/10.1145/2635868.2635894},
year = {2014}
}
